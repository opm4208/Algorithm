해싱과 해시함수에 대한 조사
- 해시는 값을 가공하여 그 값을 인덱스로 사용하여 원하는 자료를 빠르게 찾을 수 있게한다
- 해시처리한 인덱스를 이용해 배열로된 테이블에서 빠르게 접근 가능하다
- 해시테이블은 이러한 빠른 기능을 위해 만들어져있어 그대신 메모리를 많이 차지한다
- 해시방법으로는 나눗셈법, 자릿수 접기 방법이 있으며 나눗셈법은 입력한 값에 해시처리를 한 후 테이블의 크기만큼 나눠준값을 인덱스로 사용한다
- 자릿수 접기 방법은 각 자릿수를 더해 인덱스로 사용한다
- 해시함수의 효율은 해시함수의 처리속도가 빠르고 해시함수의 결과의 밀집도가 낮고 해쉬테이블의 크기가 클수록 좋다 하지만 너무 크면 메모리에 부담이 간다

해시테이블 충돌과 해결방안
- 해시테이블의 충돌이란 해시함수가 다른 입력 값들이 같은 해시테이블의 주소를 반환할때 충돌이 일어난다
- 해시테이블의 충돌 해결방법으로 체이닝, 개방 주소법이 있다

- 체이닝이란 해시 충돌이 발생시 연결리스트로 데이터들을 연결해서 충돌을 해결하는 방법이다
- 체이닝 장점: 해시테이블에 자료가 많아도 성능저하가 적다
- 체이닝 단점: 해시테이블 말고 다른 추가적인 저장공간이 필요하다(메모리 소모)

- 개방 주소법이란 해시 충돌이 발생시 다른 빈 공간을 찾아 데이터를 저장하는 방식이다
- 빈 공간을 찾는방법은 선형탐색, 제곱탐색, 이중해시 등이있다
- 개방 주소법 장점: 추가적인 저장공간이 필요 없고 오버헤드가 적다
- 개방 주소법 단점: 해시테이블에 자료가 많아 질수록 성능저하가 많다
- 해시테이블에 저장된 데이터가 많아 성능저하가 발생할 수 있기 때문에 재행싱 과정을 진행한다
- 재해싱이란 해시테이블의 크기를 늘리고 테이블 내의 모든 데이터를 다시 해싱하여 저장한다
